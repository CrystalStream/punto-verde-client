// Foundation for Sites by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

// sass-lint:disable force-attribute-nesting, force-pseudo-nesting, no-color-literals, no-qualifying-elements

////
/// @group global
////

@import url('https://fonts.googleapis.com/css?family=Dosis:400,700');
@import '../../../node_modules/foundation-sites/scss/util/util';

/// Font size attribute applied to `<html>` and `<body>`. We use 100% by default so the value is inherited from the user's browser settings.
/// @type Number
$global-font-size: 100% !default;

/// Global width of your site. Used by the grid to determine row width.
/// @type Number
$global-width: rem-calc(1200) !default;

/// Default line height for all type. `$global-lineheight` is 24px while `$global-font-size` is 16px
/// @type Number
$global-lineheight: 1.5 !default;

/// Colors used for buttons, callouts, links, etc. There must always be a color called `primary`.
/// @type Map
$foundation-palette: (
  primary: #2BAB60,
  secondary: #FAD02F,
  success: #B1D781,
  warning: #F69229,
  alert: #F16950,
) !default;

/// Color used for hover links on table
$hoverLinkColor: #B22D09;

/// Dashboard colors
$app-dashboard-top-nav-color: #2c3840;
$app-dashboard-top-nav-height: 55px;

/// Color used for light gray UI items.
/// @type Color
$light-gray: #e6e6e6 !default;

/// Color used for medium gray UI items.
/// @type Color
$medium-gray: #cacaca !default;

/// Color used for dark gray UI items.
/// @type Color
$dark-gray: #8a8a8a !default;

/// Color used for black ui items.
/// @type Color
$black: #0a0a0a !default;

/// Color used for white ui items.
/// @type Color
$white: #fff !default;

/// Background color of the body.
/// @type Color
$body-background: $white !default;

/// Text color of the body.
/// @type Color
$body-font-color: $black !default;

/// Font stack of the body.
/// @type List
$body-font-family: 'Dosis', sans-serif !default;

/// Set to `true` to enable antialiased type, using the `-webkit-font-smoothing` and `-moz-osx-font-smoothing` CSS properties.
/// @type Boolean
$body-antialiased: true !default;

/// Global value used for margin on components.
/// @type Number
$global-margin: 1rem !default;

/// Global value used for padding on components.
/// @type Number
$global-padding: 1rem !default;

/// Global value used for positioning on components.
/// @type Number
$global-position: 1rem !default;

/// Global font weight used for normal type.
/// @type Keyword | Number
$global-weight-normal: normal !default;

/// Global font weight used for bold type.
/// @type Keyword | Number
$global-weight-bold: bold !default;

/// Global value used for all elements that have a border radius.
/// @type Number
$global-radius: 0 !default;

/// Global value used for all menu styles. Can be overwritten at individual menu component level.
/// @type Number
$global-menu-padding: 0.7rem 1rem !default;

/// Global value used for all menu styles. Nested margin for submenu.
$global-menu-nested-margin: 1rem !default;

/// Sets the text direction of the CSS. Can be either `ltr` or `rtl`.
/// @type Keyword
$global-text-direction: ltr !default;

/// Enables flexbox for components that support it.
/// @type Boolean
$global-flexbox: true !default;

/// Enabled responsive breakpoints for prototypes if applicable
/// @type Boolean
$global-prototype-breakpoints: false !default;

/// Button cursor's value, `auto` by default
/// @type Keyword
$global-button-cursor: auto !default;

@if not map-has-key($foundation-palette, primary) {
  @error 'In $foundation-palette, you must have a color named "primary".';
}

// Internal variables used for text direction
$global-left: if($global-text-direction == rtl, right, left);
$global-right: if($global-text-direction == rtl, left, right);

// Internal variable that contains the flex justifying options
$-zf-flex-justify: -zf-flex-justify($global-text-direction);

/// Global tolerance for color pick contrast.
/// @type Number
$global-color-pick-contrast-tolerance: 0 !default;

// Internal variables used for colors
@include add-foundation-colors;

@mixin foundation-global-styles {
  @include -zf-normalize;

  // These styles are applied to a <meta> tag, which is read by the Foundation JavaScript
  .foundation-mq {
    font-family: '#{-zf-bp-serialize($breakpoints)}';
  }

  html {
    box-sizing: border-box;
    font-size: $global-font-size;
  }

  // Set box-sizing globally to handle padding and border widths
  *,
  *::before,
  *::after {
    box-sizing: inherit;
  }

  // Default body styles
  body {
    margin: 0;
    padding: 0;

    background: $body-background;

    font-family: $body-font-family;
    font-weight: $global-weight-normal;
    line-height: $global-lineheight;
    color: $body-font-color;

    @if ($body-antialiased) {
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
  }

  img {
    // Get rid of gap under images by making them display: inline-block; by default
    display: inline-block;
    vertical-align: middle;

    // Grid defaults to get images and embeds to work properly
    max-width: 100%;
    height: auto;
    -ms-interpolation-mode: bicubic;
  }

  // Make sure textarea takes on height automatically
  textarea {
    height: auto;
    min-height: 50px;
    border-radius: $global-radius;
  }

  // Make select elements are 100% width by default
  select {
    box-sizing: border-box;
    width: 100%;
    border-radius: $global-radius;
  }

  // Styles Google Maps and MapQuest embeds properly
  // sass-lint:disable-line no-ids
  .map_canvas,
  .mqa-display {
    img,
    embed,
    object {
      max-width: none !important;
    }
  }

  // Reset <button> styles created by most browsers
  button {
    @include disable-mouse-outline;
    padding: 0;
    appearance: none;
    border: 0;
    border-radius: $global-radius;
    background: transparent;
    line-height: 1;
    cursor: $global-button-cursor;
  }

  // Prevent text overflow on pre
  pre {
    overflow: auto;
  }

  // Make reset inherit font-family instead of settings sans-serif
  button,
  input,
  optgroup,
  select,
  textarea {
    font-family: inherit;
  }

  // Internal classes to show/hide elements in JavaScript
  .is-visible {
    display: block !important;
  }

  .is-hidden {
    display: none !important;
  }

  table {
    thead {
      color: rgb(49, 49, 49);
    }
    tbody {
      font-weight: bold;
      tr {
        td {
          a {
            color: black;
            transition: .1s;
            &:hover{
              color: $hoverLinkColor;
              text-decoration: underline;
            }
          }
        }
      }
    }
  }
  body {
    padding: 0px;
  }

  .menu-vertical-item {
    border-bottom: 1px dotted lighten($success-color, 20);
  }

  .app-dashboard {
    height: 100vh;
    display: flex;
    flex-direction: column;
  }

  .app-dashboard-body {
    flex: 1 1 auto;
    display: flex;
  }

  .app-dashboard-top-nav-bar  {
    display: flex;
    align-items: center;
    justify-content: center;
    background: $app-dashboard-top-nav-color;
    height: $app-dashboard-top-nav-height;
    width: 100%;
    flex: 0 0 $app-dashboard-top-nav-height;
    .menu-icon {
      vertical-align: text-bottom;
    }
  }

  .app-dashboard-logo {
    color: $white;
    text-transform: uppercase;
    font-weight: bold;
  }

  .app-dashboard-search-bar-container {
    position: relative;
    color: $white;
  }

  .app-dashboard-search {
    background: lighten($app-dashboard-top-nav-color, 10%);
    border: 0;
    margin-bottom: 0;
    color: $white;

    &:active,
    &:focus {
      background: darken($app-dashboard-top-nav-color, 5%);
    }
  }

  .app-dashboard-search-icon {
    position: absolute;
    color: $white;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
  }

  .app-dashboard-top-bar-actions {
    align-items: center;
    display: flex;

    button {
      margin-bottom: 0;
      margin-right: 2rem;

      &.hollow {
        border-color: $white;
        color: $white;

        &:hover {
          background: $white;
          color: $primary-color;
        }
      }
    }

    .fa-info-circle {
      color: $white;
      font-size: 1.5rem;
    }
  }

  .app-dashboard-sidebar {
    background-color: $white;
    font-size: 1.1rem;
    height: 100%;
    overflow-x: visible;
    overflow-y: auto;
    z-index: 1;
    transition: all .3s .3s;
    padding-top: 1rem;


    .app-dashboard-open-sidebar, .app-dashboard-close-sidebar{
      align-items: baseline;
      display: flex;
      justify-content: space-between;
      padding: 2rem 1rem;
      .app-dashboard-sidebar-block-title{
        border-bottom: 1px solid black;
      }
    }

    .app-dashboard-sidebar-close-button {
      font-size: 14px;
    }

    .app-dashboard-sidebar-inner {
      height: 100%;
      overflow-x: hidden;
      overflow-y: auto;
      .menu > li > a {
        align-items: center;
      }
    }
    .fa.large {
      font-size: rem-calc(24);
      width: 40px;
    }
  }

  .reveal-for-medium {
    .app-dashboard-open-sidebar {
      display: none;
    }
  }

  .app-dashboard-sidebar-footer {
    background: rgba(42, 57, 79, 0.8);
    bottom: 0;
    left: 0;
    padding: 1rem;
    position: absolute;
    width: 100%;
  }

  .app-dashboard-open-sidebar {
    text-align: center;
  }

  .app-dashboard-body-content {
    transition: all .3s .3s;
    overflow-y: auto;
    flex: 1 1 0;
    padding: 20px;
    background-color: $white;
  }

  @mixin shrunk-sidebar() {
    .app-dashboard-close-sidebar, .app-dashboard-sidebar-text {
      display: none;
    }

    .app-dashboard-open-sidebar {
      display: block;
    }

    .app-dashboard-sidebar {
      width: 80px;
      .fa.large {
        width: auto;
      }
    }

    .off-canvas-content {
      margin-left: 80px;
      width: calc(100% - 80px);
    }

    .navigation {
      margin-top: 2rem;
      text-align: center;

    }
    .menu.vertical > li > a {
      justify-content: center;
    }

    .menu {
      li {
        &::after {
          display: none;
          opacity: 0;
          transition: opacity 0.5s ease-in-out;
        }

        a {
          padding: 0.75rem;
          svg {
            margin: 0;
          }
          span {
            display: none;
            opacity: 0;
            transition: opacity 0.5s ease-in-out;
          }
        }
      }
    }
  }

}


/// Loads normalize.css.
/// @access private
@mixin -zf-normalize {
  @include normalize();
}
